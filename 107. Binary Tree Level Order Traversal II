题目如下：
Given a binary tree, return the bottom-up level order traversal of its nodes' values. (ie, from left to right, level by level from leaf to root).

For example:
Given binary tree [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7
return its bottom-up level order traversal as:
[
  [15,7],
  [9,20],
  [3]
]
题解：这是一道典型的BFS树的层次遍历，最简单的做法就是层次遍历完成以后，使用python的reversed函数把结果反转一下
class Solution(object):
    
    def helper(self,res,node,level):
        if node==None:return
        if len(res)==level:
            res.append([])
        res[level].append(node.val)
        if node.left!=None:
            self.helper(res,node.left,level+1)
        if node.right!=None:
            self.helper(res,node.right,level+1)
        return
    def levelOrderBottom(self, root):
        if root!=None:
            res=[]
            self.helper(res,root,0)
            return reversed(res)
  这个解法的复杂度为logn,但是由于reversed占用时间较多，因此我们采用一次到位的方式进行对res的插入
  ，解法如下
  class Solution(object):
    
    def helper(self,res,node,level):
        if node==None:return
        if len(res)==level:
            res.insert(0,[])
        res[-level-1].append(node.val)
        if node.left!=None:
            self.helper(res,node.left,level+1)
        if node.right!=None:
            self.helper(res,node.right,level+1)
        return
    def levelOrderBottom(self, root):
        if root!=None:
            res=[]
            self.helper(res,root,0)
            return res
